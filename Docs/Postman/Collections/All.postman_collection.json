{
	"info": {
		"_postman_id": "3a483820-09f1-4dc4-b54e-d851c52f296e",
		"name": "All",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Games",
			"item": [
				{
					"name": "Games",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "457fc636-020c-49e2-bbd0-88bec53b7e72",
								"exec": [
									"pm.test(\"Successful request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"});",
									"",
									"",
									"",
									"if(pm.response.code > 199 && pm.response.code < 203){",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.test(\"Response not null\", function () {",
									"        pm.expect(jsonData).not.eql(null);",
									"    });",
									"",
									"    ",
									"    pm.test(\"Response not undefined\", function () {",
									"        pm.expect(jsonData).not.eql(undefined);",
									"    });",
									"    ",
									"    if(jsonData !== null && jsonData !== undefined){",
									"        ",
									"        // Additional Tests here",
									"    }",
									"    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Games}}",
							"host": [
								"{{Games}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single Game",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0c71645-ea3a-4b01-97b0-b424b5207a94",
								"exec": [
									"pm.test(\"Successful request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"});",
									"",
									"",
									"",
									"if(pm.response.code > 199 && pm.response.code < 203){",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.test(\"Response not null\", function () {",
									"        pm.expect(jsonData).not.eql(null);",
									"    });",
									"",
									"    ",
									"    pm.test(\"Response not undefined\", function () {",
									"        pm.expect(jsonData).not.eql(undefined);",
									"    });",
									"    ",
									"    if(jsonData !== null && jsonData !== undefined){",
									"        ",
									"        // Additional Tests here",
									"    }",
									"    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Games}}/3816",
							"host": [
								"{{Games}}"
							],
							"path": [
								"3816"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single Game",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "842dbddd-bae8-425e-8d9f-1de45e64a747",
								"exec": [
									"pm.test(\"Successful request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"});",
									"",
									"",
									"",
									"if(pm.response.code > 199 && pm.response.code < 203){",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.test(\"Response not null\", function () {",
									"        pm.expect(jsonData).not.eql(null);",
									"    });",
									"",
									"    ",
									"    pm.test(\"Response not undefined\", function () {",
									"        pm.expect(jsonData).not.eql(undefined);",
									"    });",
									"    ",
									"    if(jsonData !== null && jsonData !== undefined){",
									"        ",
									"        // Additional Tests here",
									"    }",
									"    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 3816,\r\n  \"name\": \"Seattle\",\r\n  \"countryCode\": \"USA\",\r\n  \"district\": \"Washington\",\r\n  \"population\": 652405\r\n}"
						},
						"url": {
							"raw": "{{Games}}",
							"host": [
								"{{Games}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single Game",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "881de65a-bfe2-493f-83a4-7285677abca8",
								"exec": [
									"pm.test(\"Successful request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"});",
									"",
									"",
									"",
									"if(pm.response.code > 199 && pm.response.code < 203){",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.test(\"Response not null\", function () {",
									"        pm.expect(jsonData).not.eql(null);",
									"    });",
									"",
									"    ",
									"    pm.test(\"Response not undefined\", function () {",
									"        pm.expect(jsonData).not.eql(undefined);",
									"    });",
									"    ",
									"    if(jsonData !== null && jsonData !== undefined){",
									"        ",
									"        // Additional Tests here",
									"    }",
									"    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"season_id\": 1\r\n}"
						},
						"url": {
							"raw": "{{Games}}",
							"host": [
								"{{Games}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single Game",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82ec79a5-9004-436d-8238-5822bc36d49d",
								"exec": [
									"pm.test(\"Successful request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"});",
									"",
									"",
									"",
									"if(pm.response.code > 199 && pm.response.code < 203){",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.test(\"Response not null\", function () {",
									"        pm.expect(jsonData).not.eql(null);",
									"    });",
									"",
									"    ",
									"    pm.test(\"Response not undefined\", function () {",
									"        pm.expect(jsonData).not.eql(undefined);",
									"    });",
									"    ",
									"    if(jsonData !== null && jsonData !== undefined){",
									"        ",
									"        // Additional Tests here",
									"    }",
									"    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Games}}/4081",
							"host": [
								"{{Games}}"
							],
							"path": [
								"4081"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GameTypes",
			"item": [
				{
					"name": "Single GameType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b32c990f-bd42-4089-ba1f-ce9cd45eb90b",
								"exec": [
									"pm.test(\"Successful request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"});",
									"",
									"",
									"",
									"if(pm.response.code > 199 && pm.response.code < 203){",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.test(\"Response not null\", function () {",
									"        pm.expect(jsonData).not.eql(null);",
									"    });",
									"",
									"    ",
									"    pm.test(\"Response not undefined\", function () {",
									"        pm.expect(jsonData).not.eql(undefined);",
									"    });",
									"    ",
									"    if(jsonData !== null && jsonData !== undefined){",
									"        ",
									"        // Additional Tests here",
									"    }",
									"    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{GameTypes}}",
							"host": [
								"{{GameTypes}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GameTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e5cf25b-9413-4667-8261-79bfa9e37954",
								"exec": [
									"pm.test(\"Successful request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"});",
									"",
									"",
									"",
									"if(pm.response.code > 199 && pm.response.code < 203){",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.test(\"Response not null\", function () {",
									"        pm.expect(jsonData).not.eql(null);",
									"    });",
									"",
									"    ",
									"    pm.test(\"Response not undefined\", function () {",
									"        pm.expect(jsonData).not.eql(undefined);",
									"    });",
									"    ",
									"    if(jsonData !== null && jsonData !== undefined){",
									"        ",
									"        // Additional Tests here",
									"    }",
									"    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{GameTypes}}",
							"host": [
								"{{GameTypes}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single GameType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd1615c7-e19e-4d10-bb91-fa3f6257c68f",
								"exec": [
									"pm.test(\"Successful request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"});",
									"",
									"",
									"",
									"if(pm.response.code > 199 && pm.response.code < 203){",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.test(\"Response not null\", function () {",
									"        pm.expect(jsonData).not.eql(null);",
									"    });",
									"",
									"    ",
									"    pm.test(\"Response not undefined\", function () {",
									"        pm.expect(jsonData).not.eql(undefined);",
									"    });",
									"    ",
									"    if(jsonData !== null && jsonData !== undefined){",
									"        ",
									"        // Additional Tests here",
									"    }",
									"    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 3816,\r\n  \"name\": \"Seattle\",\r\n  \"countryCode\": \"USA\",\r\n  \"district\": \"Washington\",\r\n  \"population\": 652405\r\n}"
						},
						"url": {
							"raw": "{{GameTypes}}/3816",
							"host": [
								"{{GameTypes}}"
							],
							"path": [
								"3816"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single GameType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2542ce7-2c53-4c04-a4e5-d08ac8dd3757",
								"exec": [
									"pm.test(\"Successful request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"});",
									"",
									"",
									"",
									"if(pm.response.code > 199 && pm.response.code < 203){",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.test(\"Response not null\", function () {",
									"        pm.expect(jsonData).not.eql(null);",
									"    });",
									"",
									"    ",
									"    pm.test(\"Response not undefined\", function () {",
									"        pm.expect(jsonData).not.eql(undefined);",
									"    });",
									"    ",
									"    if(jsonData !== null && jsonData !== undefined){",
									"        ",
									"        // Additional Tests here",
									"    }",
									"    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"season_id\": 1\r\n}"
						},
						"url": {
							"raw": "{{GameTypes}}",
							"host": [
								"{{GameTypes}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single GameType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1b40f48-91dd-4f35-a904-928e8f11437f",
								"exec": [
									"pm.test(\"Successful request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"});",
									"",
									"",
									"",
									"if(pm.response.code > 199 && pm.response.code < 203){",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.test(\"Response not null\", function () {",
									"        pm.expect(jsonData).not.eql(null);",
									"    });",
									"",
									"    ",
									"    pm.test(\"Response not undefined\", function () {",
									"        pm.expect(jsonData).not.eql(undefined);",
									"    });",
									"    ",
									"    if(jsonData !== null && jsonData !== undefined){",
									"        ",
									"        // Additional Tests here",
									"    }",
									"    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{GameTypes}}/4081",
							"host": [
								"{{GameTypes}}"
							],
							"path": [
								"4081"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Scores",
			"item": [
				{
					"name": "Score",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a7bfcac-feda-4eb4-8101-dfa9b86df770",
								"exec": [
									"pm.test(\"Successful request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"});",
									"",
									"",
									"",
									"if(pm.response.code > 199 && pm.response.code < 203){",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.test(\"Response not null\", function () {",
									"        pm.expect(jsonData).not.eql(null);",
									"    });",
									"",
									"    ",
									"    pm.test(\"Response not undefined\", function () {",
									"        pm.expect(jsonData).not.eql(undefined);",
									"    });",
									"    ",
									"    if(jsonData !== null && jsonData !== undefined){",
									"        ",
									"        // Additional Tests here",
									"    }",
									"    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"UserId\": 3,\r\n  \"Value\": 6\r\n}"
						},
						"url": {
							"raw": "{{Scores}}",
							"host": [
								"{{Scores}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Score",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a7bfcac-feda-4eb4-8101-dfa9b86df770",
								"exec": [
									"pm.test(\"Successful request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"});",
									"",
									"",
									"",
									"if(pm.response.code > 199 && pm.response.code < 203){",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.test(\"Response not null\", function () {",
									"        pm.expect(jsonData).not.eql(null);",
									"    });",
									"",
									"    ",
									"    pm.test(\"Response not undefined\", function () {",
									"        pm.expect(jsonData).not.eql(undefined);",
									"    });",
									"    ",
									"    if(jsonData !== null && jsonData !== undefined){",
									"        ",
									"        // Additional Tests here",
									"    }",
									"    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"UserId\": 17,\r\n  \"Value\": 6\r\n}"
						},
						"url": {
							"raw": "{{Scores}}",
							"host": [
								"{{Scores}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Scores",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "430dacd8-74f4-4443-9ffe-6d128f2a8144",
								"exec": [
									"pm.test(\"Successful request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"});",
									"",
									"",
									"",
									"if(pm.response.code > 199 && pm.response.code < 203){",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.test(\"Response not null\", function () {",
									"        pm.expect(jsonData).not.eql(null);",
									"    });",
									"",
									"    ",
									"    pm.test(\"Response not undefined\", function () {",
									"        pm.expect(jsonData).not.eql(undefined);",
									"    });",
									"    ",
									"    if(jsonData !== null && jsonData !== undefined){",
									"        ",
									"        // Additional Tests here",
									"    }",
									"    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"UserId\": 1,\r\n  \"Value\": 8\r\n}"
						},
						"url": {
							"raw": "{{Scores}}",
							"host": [
								"{{Scores}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}